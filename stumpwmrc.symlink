;; -*-lisp-*-
;;
;; My stumpwm config

(in-package :stumpwm)

;; change the prefix key to C-z
;(set-prefix-key (kbd "C-z"))

;; prompt for interactive command
;; first arg is an optional initial contents
(defcommand colon1 (&optional (initial "")) (:rest)
            (let ((cmd (read-one-line (current-screen) ": ") :initial-input initial))
              (when cmd
                (eval-command cmd t))))

;; Set up the root window characteristics.
(run-shell-command "xsetroot -cursor_name left_ptr -solid black -name root-window")
 
;; I need CONKY!!! :)
(run-shell-command "/usr/bin/conky")
 
;; Set the prefix key to something for both hands.
(set-prefix-key (kbd "C-i"))
 
;; I like at least 10 seconds for messages.
(setf *timeout-wait* 10)
 
;; Startup message: display the machine's name.
(setf *startup-message* (machine-instance))
 
;; I like messages to be centered on the screen.
(setf *message-window-gravity* :center)
(setf *input-window-gravity* :center)
 
;; Mode line
(defvar *battery-status-command*
  "acpi -b | awk -F '[ ,]' '{printf \"%s%s\", $3, $5}' | sed s/Discharging/\-/ | sed s/Unknown// | sed s/Full// | sed s/Charging/+/")
 
(defvar *vol-status-command*
  "amixer get Master | grep [[:digit:]]*%' -o | tr -d '\\n'")
 
(setf *screen-mode-line-format*
      (list "[^B%n^b] %W^>"
      '(:eval (run-shell-command *battery-status-command* t))
      " | Vol. "
      '(:eval (run-shell-command *vol-status-command* t))
      " | %d"))
 
(setf *window-format* "%m%n%s%c")
 
(setf *mode-line-timeout* 1)

;; Turn on the new mode line.
(toggle-mode-line (current-screen)
        (current-head))

;; Set the mouse focus.
(setf *mouse-focus-policy* :click)

;; Cool display theme
;; https://github.com/Sarcasm/.stumpwm.d/blob/master/sarcasm-theme.lisp
(set-fg-color "white smoke")
(set-bg-color "grey20")
(set-border-color "chocolate")
(set-msg-border-width 2)
(setf *message-window-padding* 4)



;; =========================== Other stuff ===============================
;; mostly grabbed from the stump examples



;; Read some doc
(define-key *root-map* (kbd "d") "exec gv")

;; Browse internets
(define-key *root-map* (kbd "b") "colon1 exec firefox http://www.")

;; ssh somewhere
(define-key *root-map* (kbd "C-s") "colon1 exec xterm -e ssh")

;; Lock screen
(define-key *root-map* (kbd "C-l") "exec xlock")

;; Web jump (works for Google and DuckDuckGo
;(defmacro make-web-jump (name prefix)
;  `(defcommand ,name (search) ((:rest ,(concatenate 'string name " search: ")))
;               (substitute #\+ #\Space search)
;               (run-shell-command (concatenate 'string ,prefix search))))

;(make-web-jump "ddg" "firefox http://duckduckgo.com/?q=")
;(make-web-jump "google" "firefox http://www.google.com/search?q=")

;; C-z C-s to quickly do a DDG search
;(define-key *root-map* (kbd "C-s") "ddg")

;; Message window font
(set-font "-xos4-terminus-medium-r-normal--14-140-72-72-c-80-iso8859-15")

;;; Define window placement policy...

;; Clear rules
(clear-window-placement-rules)

;; Last rule to match takes precedence!
;;
;; TIP: if the artument to :title or :role begins with an elipsis, a substring match is performed
;;
;; TIP: if the :create flag is set then group dump is restored even for an existing group using *data-dir*/restore file
(define-frame-preference "Default"
  ;; frame raise lock (lock AND raise == jumpto)
  (0 t nil :class "Konqueror" :role "...konqueror-mainwindow")
  (1 t nil :class "XTerm"))


;(define-frame-preference "Ardour"
;  (0 t   t   :instance "ardour_editor" :type :normal)
;  (0 t   t   :title "Ardour - Session Control")
;  (0 nil nil :class "XTerm")
;  (1 t   nil :type :normal)
;  (1 t   t   :instance "ardour_mixer")
;  (2 t   t   :instance "jvmetro")
;  (1 t   t   :instance "qjackctl")
;  (3 t   t   :instance "qjackctl" :role "qjackctlMainForm"))

(define-frame-preference "Emacs"
  (1 t t :restore "emacs-editing-dump" :title "...xdvi")
  (0 t t :create "emacs-dump" :class "Emacs"))
